// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/15/2024 16:09:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          fsm_loop_3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fsm_loop_3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] data_in;
reg new_loop;
reg [7:0] q_m;
reg request_finished;
reg start;
reg stop;
// wires                                               
wire [7:0] address;
wire [7:0] address_d;
wire [7:0] address_m;
wire [7:0] data;
wire [7:0] data_d;
wire [7:0] data_i;
wire [7:0] data_j;
wire [7:0] data_m;
wire [7:0] f;
wire finished;
wire [7:0] i;
wire [7:0] j;
wire [4:0] k;
wire request;
wire update_key;
wire wren_d;
wire write;

// assign statements (if any)                          
fsm_loop_3 i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.address_d(address_d),
	.address_m(address_m),
	.clk(clk),
	.data(data),
	.data_d(data_d),
	.data_i(data_i),
	.data_in(data_in),
	.data_j(data_j),
	.data_m(data_m),
	.f(f),
	.finished(finished),
	.i(i),
	.j(j),
	.k(k),
	.new_loop(new_loop),
	.q_m(q_m),
	.request(request),
	.request_finished(request_finished),
	.start(start),
	.stop(stop),
	.update_key(update_key),
	.wren_d(wren_d),
	.write(write)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// start
initial
begin
	start = 1'b0;
	start = #20000 1'b1;
	start = #20000 1'b0;
end 

// request_finished
initial
begin
	request_finished = 1'b1;
end 

// new_loop
initial
begin
	new_loop = 1'b0;
	new_loop = #230000 1'b1;
	new_loop = #50000 1'b0;
end 
// q_m[ 7 ]
initial
begin
	q_m[7] = 1'b0;
end 
// q_m[ 6 ]
initial
begin
	q_m[6] = 1'b0;
end 
// q_m[ 5 ]
initial
begin
	q_m[5] = 1'b0;
end 
// q_m[ 4 ]
initial
begin
	q_m[4] = 1'b0;
end 
// q_m[ 3 ]
initial
begin
	q_m[3] = 1'b0;
end 
// q_m[ 2 ]
initial
begin
	q_m[2] = 1'b0;
end 
// q_m[ 1 ]
initial
begin
	q_m[1] = 1'b0;
end 
// q_m[ 0 ]
initial
begin
	q_m[0] = 1'b0;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b0;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b0;
end 
endmodule

