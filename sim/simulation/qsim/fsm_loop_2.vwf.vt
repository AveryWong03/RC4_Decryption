// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/15/2024 15:43:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          fsm_loop_2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fsm_loop_2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] data_in;
reg [23:0] key;
reg request_finished;
reg start;
// wires                                               
wire [7:0] address;
wire [7:0] address_j;
wire [7:0] count;
wire [7:0] data;
wire [7:0] data_i;
wire [7:0] data_j;
wire finished;
wire [7:0] key_select;
wire request;
wire [7:0] state;
wire write;

// assign statements (if any)                          
fsm_loop_2 i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.address_j(address_j),
	.clk(clk),
	.count(count),
	.data(data),
	.data_i(data_i),
	.data_in(data_in),
	.data_j(data_j),
	.finished(finished),
	.key(key),
	.key_select(key_select),
	.request(request),
	.request_finished(request_finished),
	.start(start),
	.state(state),
	.write(write)
);
initial 
begin 
#350000 $finish;
end 

// clk
initial
begin
	repeat(17)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
	clk = 1'b0;
end 

// start
initial
begin
	start = 1'b0;
	start = #20000 1'b1;
	start = #20000 1'b0;
end 
// key[ 23 ]
initial
begin
	key[23] = 1'b0;
end 
// key[ 22 ]
initial
begin
	key[22] = 1'b0;
end 
// key[ 21 ]
initial
begin
	key[21] = 1'b0;
end 
// key[ 20 ]
initial
begin
	key[20] = 1'b0;
end 
// key[ 19 ]
initial
begin
	key[19] = 1'b0;
end 
// key[ 18 ]
initial
begin
	key[18] = 1'b0;
end 
// key[ 17 ]
initial
begin
	key[17] = 1'b0;
end 
// key[ 16 ]
initial
begin
	key[16] = 1'b0;
end 
// key[ 15 ]
initial
begin
	key[15] = 1'b0;
end 
// key[ 14 ]
initial
begin
	key[14] = 1'b0;
end 
// key[ 13 ]
initial
begin
	key[13] = 1'b0;
end 
// key[ 12 ]
initial
begin
	key[12] = 1'b0;
end 
// key[ 11 ]
initial
begin
	key[11] = 1'b0;
end 
// key[ 10 ]
initial
begin
	key[10] = 1'b0;
end 
// key[ 9 ]
initial
begin
	key[9] = 1'b1;
end 
// key[ 8 ]
initial
begin
	key[8] = 1'b0;
end 
// key[ 7 ]
initial
begin
	key[7] = 1'b0;
end 
// key[ 6 ]
initial
begin
	key[6] = 1'b1;
end 
// key[ 5 ]
initial
begin
	key[5] = 1'b0;
end 
// key[ 4 ]
initial
begin
	key[4] = 1'b0;
end 
// key[ 3 ]
initial
begin
	key[3] = 1'b1;
end 
// key[ 2 ]
initial
begin
	key[2] = 1'b0;
end 
// key[ 1 ]
initial
begin
	key[1] = 1'b0;
end 
// key[ 0 ]
initial
begin
	key[0] = 1'b1;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b0;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
	data_in[1] = #240000 1'b1;
	data_in[1] = #40000 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b0;
	data_in[0] = #190000 1'b1;
	data_in[0] = #90000 1'b0;
end 

// request_finished
initial
begin
	request_finished = 1'b1;
end 
endmodule

